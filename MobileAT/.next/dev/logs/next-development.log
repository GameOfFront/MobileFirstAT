[00:00:01.430] Server  LOG      ✓ Ready in 1065ms
[00:00:11.440] Browser ERROR   A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

%s%s https://react.dev/link/hydration-mismatch 

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <RootLayout>
                        <html
                          lang="en"
-                         className="fusion-extension-loaded"
                        >
                  ...

[00:00:15.572] Browser ERROR   A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

%s%s https://react.dev/link/hydration-mismatch 

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/Tarefa12" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <RootLayout>
                        <html
                          lang="en"
-                         className="fusion-extension-loaded"
                        >
                  ...

[00:02:32.601] Server  LOG      ✓ Compiled in 48ms
[00:02:33.414] Browser ERROR   ./app/Tarefa12/page.tsx:20:8
Ecmascript file had an error
  18 | } from "@mui/material";
  19 |
> 20 | import Grid from "@mui/material/Grid";
     |        ^^^^
  21 |
  22 |
  23 | // ===== Tipagem dos itens =====

the name `Grid` is defined multiple times

Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]
[00:02:37.415] Browser DEBUG   TSS: Counted history being replaced
[00:02:37.415] Browser DEBUG   TSS: Caught history
[00:02:37.415] Browser DEBUG   TSS: Checking if repeated 500 times for interval 1000 against data:  {}
[00:03:03.378] Server  LOG      ✓ Compiled in 30ms
[00:03:05.411] Browser ERROR   ./app/Tarefa12/page.tsx:20:8
Ecmascript file had an error
  18 | } from "@mui/material";
  19 |
> 20 | import Grid from "@mui/material/Grid";
     |        ^^^^
  21 |
  22 |
  23 | // ===== Tipagem dos itens =====

the name `Grid` is defined multiple times

Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]
[00:03:06.409] Browser DEBUG   TSS: Counted history being replaced
[00:03:06.409] Browser DEBUG   TSS: Caught history
[00:03:06.409] Browser DEBUG   TSS: Checking if repeated 500 times for interval 1000 against data:  {"lastCount":1,"lastTime":1761667081281}
[00:04:07.163] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.165] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.166] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.169] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.177] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.179] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.180] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.182] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.184] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.186] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.187] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.188] Server  ERROR    ⨯ ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {



Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found


[00:04:07.209] Server  LOG      ✓ Compiled in 44ms
[00:04:07.411] Browser ERROR   ./app/Tarefa12/page.tsx:18:1
Module not found: Can't resolve '@mui/material/Unstable_Grid2'
  16 |   useMediaQuery,
  17 | } from "@mui/material";
> 18 | import Grid from "@mui/material/Unstable_Grid2"; // ✅ Novo sistema de Grid (não usa item/container)
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  19 |
  20 | // ===== Tipagem dos itens =====
  21 | interface Item {

Import traces:
  Client Component Browser:
    ./app/Tarefa12/page.tsx [Client Component Browser]
    ./app/Tarefa12/page.tsx [Server Component]

  Client Component SSR:
    ./app/Tarefa12/page.tsx [Client Component SSR]
    ./app/Tarefa12/page.tsx [Server Component]

https://nextjs.org/docs/messages/module-not-found
[00:04:27.415] Browser DEBUG   TSS: Counted history being replaced
[00:04:27.415] Browser DEBUG   TSS: Caught history
[00:04:27.415] Browser DEBUG   TSS: Checking if repeated 500 times for interval 1000 against data:  {"lastCount":1,"lastTime":1761667110547}
[00:04:34.641] Server  LOG      ✓ Compiled in 34ms
[00:06:12.920] Server  LOG      ✓ Compiled in 27ms
[00:06:26.390] Browser ERROR   A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

%s%s https://react.dev/link/hydration-mismatch 

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/Tarefa12" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <RootLayout>
                        <html
                          lang="en"
-                         className="fusion-extension-loaded"
                        >
                  ...

[00:08:02.521] Browser LOG     TSS: Received response from checkDomainAndRun: {"isAllowListed":false,"isProtectionEnabled":true,"isScamsProtectionEnabled":true}
[00:08:02.521] Browser DEBUG   injection-tss TSS: hosted page injected
[00:08:02.521] Browser DEBUG   injection-tss MBTSS: Nonce:  nonce
[00:08:02.632] Browser ERROR   A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

%s%s https://react.dev/link/hydration-mismatch 

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <RootLayout>
                        <html
                          lang="en"
-                         className="fusion-extension-loaded"
                        >
                  ...

[00:19:15.416] Browser DEBUG   TSS: Counted history being replaced
[00:19:15.416] Browser DEBUG   TSS: Caught history
[00:19:15.416] Browser DEBUG   TSS: Checking if repeated 500 times for interval 1000 against data:  {}
[00:23:01.926] Browser ERROR   A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

%s%s https://react.dev/link/hydration-mismatch 

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/Tarefa13" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <RootLayout>
                        <html
                          lang="en"
-                         className="fusion-extension-loaded"
                        >
                  ...

[00:23:56.260] Browser ERROR   uncaughtError: Error: Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/Tarefa13" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <RootLayout>
                        <html
                          lang="en"
-                         className="fusion-extension-loaded"
                        >
                          ...
                            <Quiz params={Promise} searchParams={Promise}>
                              <Paper elevation={4} sx={{p:3,maxWidth:600, ...}}>
                                <MuiPaper-root as="div" ownerState={{elevation:4, ...}} className="MuiPaper-r..." ...>
                                  <Insertion>
+                                 <div
+                                   className="MuiPaper-root MuiPaper-elevation MuiPaper-rounded MuiPaper-elevation4 c..."
+                                   style={{--Paper-shadow:"0px 2px 4p..."}}
+                                 >
-                                 <style data-emotion="css 1pi2mkb-MuiPaper-root" data-s="">
                  ...

[00:26:22.444] Server  LOG      ✓ Compiled in 29ms
[01:08:53.701] Server  LOG      ✓ Compiled in 31ms
[01:10:10.232] Browser ERROR   A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:

- A server/client branch `if (typeof window !== 'undefined')`.
- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

%s%s https://react.dev/link/hydration-mismatch 

  ...
    <HotReload globalError={[...]} webSocket={WebSocket} staticIndicatorState={{pathname:null, ...}}>
      <AppDevOverlayErrorBoundary globalError={[...]}>
        <ReplaySsrOnlyErrors>
        <DevRootHTTPAccessFallbackBoundary>
          <HTTPAccessFallbackBoundary notFound={<NotAllowedRootHTTPFallbackError>}>
            <HTTPAccessFallbackErrorBoundary pathname="/Tarefa13" notFound={<NotAllowedRootHTTPFallbackError>} ...>
              <RedirectBoundary>
                <RedirectErrorBoundary router={{...}}>
                  <Head>
                  <__next_root_layout_boundary__>
                    <SegmentViewNode type="layout" pagePath="layout.tsx">
                      <SegmentTrieNode>
                      <link>
                      <script>
                      <RootLayout>
                        <html
                          lang="en"
-                         className="fusion-extension-loaded"
                        >
                  ...

